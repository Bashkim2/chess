{"ast":null,"code":"import { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves } from \"./getMoves\";\nimport { movePiece, movePawn } from \"./move\";\nconst arbiter = {\n  getRegularMoves: function (_ref) {\n    let {\n      position,\n      piece,\n      rank,\n      file\n    } = _ref;\n    if (piece.endsWith(\"n\")) return getKnightMoves({\n      position,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"b\")) return getBishopMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"r\")) return getRookMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"q\")) return getQueenMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"k\")) return getKingMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"p\")) return getPawnMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n  },\n  getValidMoves: function (_ref2) {\n    let {\n      position,\n      castleDirection,\n      prevPosition,\n      piece,\n      rank,\n      file\n    } = _ref2;\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"p\")) {\n      moves = [...moves, ...getPawnCaptures({\n        position,\n        prevPosition,\n        piece,\n        rank,\n        file\n      })];\n    }\n    if (piece.endsWith(\"k\")) moves = [...moves, ...getCastlingMoves({\n      position,\n      castleDirection,\n      piece,\n      rank,\n      file\n    })];\n    return moves;\n  },\n  performMove: function (_ref3) {\n    let {\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    } = _ref3;\n    if (piece.endsWith(\"p\")) return movePawn({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });else return movePiece({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });\n  }\n};\nexport default arbiter;","map":{"version":3,"names":["getKnightMoves","getRookMoves","getBishopMoves","getQueenMoves","getKingMoves","getPawnMoves","getPawnCaptures","getCastlingMoves","movePiece","movePawn","arbiter","getRegularMoves","_ref","position","piece","rank","file","endsWith","getValidMoves","_ref2","castleDirection","prevPosition","moves","performMove","_ref3","x","y"],"sources":["/home/ahmed-bashir/React-projects/chess/src/arbiter/arbiter.js"],"sourcesContent":["import {\n  getKnightMoves,\n  getRookMoves,\n  getBishopMoves,\n  getQueenMoves,\n  getKingMoves,\n  getPawnMoves,\n  getPawnCaptures,\n  getCastlingMoves,\n} from \"./getMoves\";\nimport { movePiece, movePawn } from \"./move\";\n\nconst arbiter = {\n  getRegularMoves: function ({ position, piece, rank, file }) {\n    if (piece.endsWith(\"n\")) return getKnightMoves({ position, rank, file });\n    if (piece.endsWith(\"b\"))\n      return getBishopMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"r\"))\n      return getRookMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"q\"))\n      return getQueenMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"k\"))\n      return getKingMoves({ position, piece, rank, file });\n    if (piece.endsWith(\"p\"))\n      return getPawnMoves({ position, piece, rank, file });\n  },\n\n  getValidMoves: function ({\n    position,\n    castleDirection,\n    prevPosition,\n    piece,\n    rank,\n    file,\n  }) {\n    let moves = this.getRegularMoves({ position, piece, rank, file });\n\n    if (piece.endsWith(\"p\")) {\n      moves = [\n        ...moves,\n        ...getPawnCaptures({ position, prevPosition, piece, rank, file }),\n      ];\n    }\n    if (piece.endsWith(\"k\"))\n      moves = [\n        ...moves,\n        ...getCastlingMoves({ position, castleDirection, piece, rank, file }),\n      ];\n\n    return moves;\n  },\n\n  performMove: function ({ position, piece, rank, file, x, y }) {\n    if (piece.endsWith(\"p\"))\n      return movePawn({ position, piece, rank, file, x, y });\n    else return movePiece({ position, piece, rank, file, x, y });\n  },\n};\n\nexport default arbiter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}