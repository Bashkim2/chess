{"ast":null,"code":"import { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves } from './getMoves';\nimport { movePiece, movePawn } from './move';\nconst arbiter = {\n  getRegularMoves: function (_ref) {\n    let {\n      position,\n      piece,\n      rank,\n      file\n    } = _ref;\n    if (piece.endsWith('n')) return getKnightMoves({\n      position,\n      rank,\n      file\n    });\n    if (piece.endsWith('b')) return getBishopMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('r')) return getRookMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('q')) return getQueenMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('k')) return getKingMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('p')) return getPawnMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n  },\n  getValidMoves: function (_ref2) {\n    let {\n      position,\n      castleDirection,\n      prevPosition,\n      piece,\n      rank,\n      file\n    } = _ref2;\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('p')) {\n      moves = [...moves, ...getPawnCaptures({\n        position,\n        prevPosition,\n        piece,\n        rank,\n        file\n      })];\n    }\n    if (piece.endsWith('k')) moves = [...moves, ...getCastlingMoves({\n      position,\n      castleDirection,\n      piece,\n      rank,\n      file\n    })];\n    return moves;\n  },\n  performMove: function (_ref3) {\n    let {\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    } = _ref3;\n    if (piece.endsWith('p')) return movePawn({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });else return movePiece({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });\n  }\n};\nexport default arbiter;","map":{"version":3,"names":["getKnightMoves","getRookMoves","getBishopMoves","getQueenMoves","getKingMoves","getPawnMoves","getPawnCaptures","getCastlingMoves","movePiece","movePawn","arbiter","getRegularMoves","_ref","position","piece","rank","file","endsWith","getValidMoves","_ref2","castleDirection","prevPosition","moves","performMove","_ref3","x","y"],"sources":["/home/ahmed-bashir/React-projects/chess/src/arbiter/arbiter.js"],"sourcesContent":["import { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves } from './getMoves'\nimport { movePiece,movePawn } from './move';\n\nconst arbiter = {\n\n    getRegularMoves : function ({position,piece,rank,file}) {\n        if (piece.endsWith('n'))\n            return getKnightMoves({position,rank,file});\n        if (piece.endsWith('b'))\n            return getBishopMoves({position,piece,rank,file});\n        if (piece.endsWith('r'))\n            return getRookMoves({position,piece,rank,file});\n        if (piece.endsWith('q'))\n            return getQueenMoves({position,piece,rank,file});\n        if (piece.endsWith('k'))\n            return getKingMoves({position,piece,rank,file});\n        if (piece.endsWith('p'))\n            return getPawnMoves({position,piece,rank,file})\n    },\n   \n    getValidMoves : function ({position,castleDirection,prevPosition,piece,rank,file}) {\n        let moves = this.getRegularMoves({position,piece,rank,file})\n\n        if (piece.endsWith('p')){\n            moves = [\n                ...moves,\n                ...getPawnCaptures({position,prevPosition,piece,rank,file})\n            ]\n        }\n        if (piece.endsWith('k'))\n            moves = [\n                ...moves , \n                ...getCastlingMoves({position,castleDirection,piece,rank,file})\n            ]\n\n        return moves\n    },\n\n    performMove : function ({position,piece,rank,file,x,y}) {\n        if (piece.endsWith('p'))\n            return movePawn({position,piece,rank,file,x,y})\n        else \n            return movePiece({position,piece,rank,file,x,y})\n    },\n}\n\n\nexport default arbiter"],"mappings":"AAAA,SAASA,cAAc,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,YAAY,EAAEC,YAAY,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,YAAY;AACvJ,SAASC,SAAS,EAACC,QAAQ,QAAQ,QAAQ;AAE3C,MAAMC,OAAO,GAAG;EAEZC,eAAe,EAAG,SAAAA,CAAAC,IAAA,EAAsC;IAAA,IAA5B;MAACC,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,GAAAJ,IAAA;IAClD,IAAIE,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOjB,cAAc,CAAC;MAACa,QAAQ;MAACE,IAAI;MAACC;IAAI,CAAC,CAAC;IAC/C,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOf,cAAc,CAAC;MAACW,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC;IACrD,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOhB,YAAY,CAAC;MAACY,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC;IACnD,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOd,aAAa,CAAC;MAACU,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC;IACpD,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOb,YAAY,CAAC;MAACS,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC;IACnD,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOZ,YAAY,CAAC;MAACQ,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC;EACvD,CAAC;EAEDE,aAAa,EAAG,SAAAA,CAAAC,KAAA,EAAmE;IAAA,IAAzD;MAACN,QAAQ;MAACO,eAAe;MAACC,YAAY;MAACP,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,GAAAG,KAAA;IAC7E,IAAIG,KAAK,GAAG,IAAI,CAACX,eAAe,CAAC;MAACE,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC;IAE5D,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAC;MACpBK,KAAK,GAAG,CACJ,GAAGA,KAAK,EACR,GAAGhB,eAAe,CAAC;QAACO,QAAQ;QAACQ,YAAY;QAACP,KAAK;QAACC,IAAI;QAACC;MAAI,CAAC,CAAC,CAC9D;IACL;IACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnBK,KAAK,GAAG,CACJ,GAAGA,KAAK,EACR,GAAGf,gBAAgB,CAAC;MAACM,QAAQ;MAACO,eAAe;MAACN,KAAK;MAACC,IAAI;MAACC;IAAI,CAAC,CAAC,CAClE;IAEL,OAAOM,KAAK;EAChB,CAAC;EAEDC,WAAW,EAAG,SAAAA,CAAAC,KAAA,EAA0C;IAAA,IAAhC;MAACX,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC,IAAI;MAACS,CAAC;MAACC;IAAC,CAAC,GAAAF,KAAA;IAClD,IAAIV,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EACnB,OAAOR,QAAQ,CAAC;MAACI,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC,IAAI;MAACS,CAAC;MAACC;IAAC,CAAC,CAAC,MAE/C,OAAOlB,SAAS,CAAC;MAACK,QAAQ;MAACC,KAAK;MAACC,IAAI;MAACC,IAAI;MAACS,CAAC;MAACC;IAAC,CAAC,CAAC;EACxD;AACJ,CAAC;AAGD,eAAehB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}