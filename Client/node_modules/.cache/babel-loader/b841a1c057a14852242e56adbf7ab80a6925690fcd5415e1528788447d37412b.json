{"ast":null,"code":"import { PieceType, TeamType } from \"../components/chessboard\";\nexport default class Referee {\n  // Function tileIsOccupied used for if a tile is occupied by another piece\n  tileIsOccupied(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to show if a tile is occupied by enemy\n  tileIsOccupiedByOpponent(x, y, boardState, team) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isEnPassantMove(x, y, boardState, team) {\n    const pieceDirection = team === TeamType.OUR ? 1 : -1;\n    const piece = boardState.find(p => p.x === x && p.y === y + pieceDirection);\n  }\n\n  // Function move pawn\n  isValidMove(px, py, x, y, type, team, boardState) {\n    // Pawns Valid Moves\n\n    if (type === PieceType.PAWN) {\n      const specialRow = team === TeamType.OUR ? 1 : 6;\n      const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n      // Movement LOGIC\n      if (px === x && py === specialRow && y - py === 2 * pawnDirection) {\n        if (!this.tileIsOccupied(x, y, boardState) && !this.tileIsOccupied(x, y - pawnDirection, boardState)) {\n          return true;\n        }\n      } else if (px === x && y - py === 1 * pawnDirection) {\n        if (!this.tileIsOccupied(x, y, boardState)) {\n          return true;\n        }\n      }\n      // Attack Logic\n      else if (x - px === -1 && y - py === pawnDirection) {\n        // Attack in Upper or Bottom left corner\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, team)) {\n          // console.log(\"We can strike!\");\n          return true;\n        }\n      } else if (x - px === 1 && y - py === pawnDirection) {\n        // Attack in Upper or Bottom right corner\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, team)) {\n          // console.log(\"We can strike!\");\n\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","Referee","tileIsOccupied","x","y","boardState","piece","find","p","tileIsOccupiedByOpponent","team","isEnPassantMove","pieceDirection","OUR","isValidMove","px","py","type","PAWN","specialRow","pawnDirection"],"sources":["/home/ahmed-bashir/React-projects/chess/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType, Piece } from \"../components/chessboard\";\n\nexport default class Referee {\n  // Function tileIsOccupied used for if a tile is occupied by another piece\n  tileIsOccupied(x: number, y: number, boardState: Piece[]): boolean {\n    const piece = boardState.find((p) => p.x === x && p.y === y);\n\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to show if a tile is occupied by enemy\n  tileIsOccupiedByOpponent(\n    x: number,\n    y: number,\n    boardState: Piece[],\n    team: TeamType\n  ): boolean {\n    const piece = boardState.find(\n      (p) => p.x === x && p.y === y && p.team !== team\n    );\n\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isEnPassantMove(x:number, y: number, boardState: Piece[], team: TeamType){\n    const pieceDirection = team === TeamType.OUR ? 1 : -1;\n    const piece = boardState.find(p => p.x === x && p.y === y + pieceDirection)\n  }\n\n  // Function move pawn\n  isValidMove(\n    px: number,\n    py: number,\n    x: number,\n    y: number,\n    type: PieceType,\n    team: TeamType,\n    boardState: Piece[]\n  ) {\n    // Pawns Valid Moves\n\n    if (type === PieceType.PAWN) {\n      const specialRow = team === TeamType.OUR ? 1 : 6;\n      const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n      // Movement LOGIC\n      if (px === x && py === specialRow && y - py === 2 * pawnDirection) {\n        if (\n          !this.tileIsOccupied(x, y, boardState) &&\n          !this.tileIsOccupied(x, y - pawnDirection, boardState)\n        ) {\n          return true;\n        }\n      } else if (px === x && y - py === 1 * pawnDirection) {\n        if (!this.tileIsOccupied(x, y, boardState)) {\n          return true;\n        }\n      }\n      // Attack Logic\n      else if (x - px === -1 && y - py === pawnDirection) {\n        // Attack in Upper or Bottom left corner\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, team)) {\n          // console.log(\"We can strike!\");\n          return true;\n        }\n      } else if (x - px === 1 && y - py === pawnDirection) {\n        // Attack in Upper or Bottom right corner\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, team)) {\n          // console.log(\"We can strike!\");\n\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}