{"ast":null,"code":"var _jsxFileName = \"/home/ahmed-bashir/React-projects/chess/src/components/chessboard.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport \"../css/App.css\";\nimport \"../css/Output.css\";\nimport Tile from \"./tile\";\nimport Referee from \"../referee/Referee\";\nimport { verticalsAxis, horizontalAxis, PieceType, TeamType, initialBoardState } from \"\";\n\n// white pawns positions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"B_pawn.png\",\n    x: i,\n    y: 6,\n    type: PieceType.PAWN,\n    team: TeamType.OPPONENT\n  });\n}\n\n// black pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"W_pawn.png\",\n    x: i,\n    y: 1,\n    type: PieceType.PAWN,\n    team: TeamType.OUR\n  });\n}\n\n// The chessboard functionality\nexport default function Chessboard() {\n  _s();\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const referee = new Referee();\n  const chessboardRef = useRef(null);\n\n  // Functions for grabbing pieces\n  function grabPiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chessPiece\") && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setGridX(gridX);\n      setGridY(gridY);\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  // Function moving pieces\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 25;\n      const y = e.clientY - 25;\n      activePiece.style.position = \"absolute\";\n\n      // chessboard constraints/limitations,\n      // pieces can not be moved outside of the chessboard\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  // Function dropping pieces\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n      const attackedPiece = pieces.find(p => p.x === x && p.y === y);\n\n      // CurrentPiece (3,4)\n\n      if (currentPiece) {\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces);\n\n        // En passant move logic\n        const isEnPassantMove = referee.isEnPassantMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirection = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.x === gridX && piece.y === gridY) {\n              piece.enPassant = false;\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y - pawnDirection)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else if (validMove) {\n          // Update the piece position\n          // And if a piece is attack remove it\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.x === gridX && piece.y === gridY) {\n              if (Math.abs(gridY - y) === 2 && piece.type === PieceType.PAWN) {\n                // En Passant move is true only for the long move only\n                piece.enPassant = true;\n              } else {\n                piece.enPassant = false;\n              }\n            }\n            if (piece.x === gridX && piece.y === gridY) {\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else {\n          // Remove the attacked piece\n          activePiece.style.position = \"relative\";\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n\n  // chessboard designed\n\n  let board = [];\n  for (let i = verticalsAxis.length - 1; i >= 0; i--) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      const number = i + j + 2;\n      let image = \"\";\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${j},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseDown: e => grabPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseUp: e => dropPiece(e),\n    ref: chessboardRef,\n    id: \"chessboard\",\n    className: \"bg-violet-600 w-96 h-96\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"EsFUs8MlFnM+tn6BqopUP4P6ED4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["useRef","useState","Tile","Referee","verticalsAxis","horizontalAxis","PieceType","TeamType","initialBoardState","jsxDEV","_jsxDEV","i","push","image","x","y","type","PAWN","team","OPPONENT","OUR","Chessboard","_s","pieces","setPieces","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","referee","chessboardRef","grabPiece","e","element","target","chessboard","current","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","p","attackedPiece","validMove","isValidMove","isEnPassantMove","pawnDirection","updatedPieces","reduce","results","piece","enPassant","removeProperty","board","length","j","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","ref","id","className","children","_c","$RefreshReg$"],"sources":["/home/ahmed-bashir/React-projects/chess/src/components/chessboard.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport \"../css/App.css\";\nimport \"../css/Output.css\";\nimport Tile from \"./tile\";\nimport Referee from \"../referee/Referee\";\nimport {\n  verticalsAxis,\n  horizontalAxis,\n  Piece,\n  PieceType,\n  TeamType,\n  initialBoardState\n} from \"\";\n\n\n\n// white pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"B_pawn.png\",\n    x: i,\n    y: 6,\n    type: PieceType.PAWN,\n    team: TeamType.OPPONENT,\n  });\n}\n\n// black pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"W_pawn.png\",\n    x: i,\n    y: 1,\n    type: PieceType.PAWN,\n    team: TeamType.OUR,\n  });\n}\n\n// The chessboard functionality\nexport default function Chessboard() {\n  const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\n  const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const referee = new Referee();\n\n  const chessboardRef = useRef<HTMLDivElement>(null);\n\n  // Functions for grabbing pieces\n  function grabPiece(e: React.MouseEvent) {\n    const element = e.target as HTMLElement;\n    const chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"chessPiece\") && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n\n      setGridX(gridX);\n      setGridY(gridY);\n\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n\n      setActivePiece(element);\n    }\n  }\n\n  // Function moving pieces\n  function movePiece(e: React.MouseEvent) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 25;\n      const y = e.clientY - 25;\n      activePiece.style.position = \"absolute\";\n\n      // chessboard constraints/limitations,\n      // pieces can not be moved outside of the chessboard\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  // Function dropping pieces\n  function dropPiece(e: React.MouseEvent) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n\n      const currentPiece = pieces.find((p) => p.x === gridX && p.y === gridY);\n      const attackedPiece = pieces.find((p) => p.x === x && p.y === y);\n\n      // CurrentPiece (3,4)\n\n      if (currentPiece) {\n        const validMove = referee.isValidMove(\n          gridX,\n          gridY,\n          x,\n          y,\n          currentPiece.type,\n          currentPiece.team,\n          pieces\n        );\n\n        // En passant move logic\n        const isEnPassantMove = referee.isEnPassantMove(\n          gridX,\n          gridY,\n          x,\n          y,\n          currentPiece.type,\n          currentPiece.team,\n          pieces\n        );\n\n        const pawnDirection = currentPiece.team === TeamType.OUR ? 1 : -1;\n\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.x === gridX && piece.y === gridY) {\n              piece.enPassant = false;\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y - pawnDirection)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, [] as Piece[]);\n          setPieces(updatedPieces);\n        } else if (validMove) {\n          // Update the piece position\n          // And if a piece is attack remove it\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.x === gridX && piece.y === gridY) {\n              if (Math.abs(gridY - y) === 2 && piece.type === PieceType.PAWN) {\n                // En Passant move is true only for the long move only\n                piece.enPassant = true;\n              } else {\n                piece.enPassant = false;\n              }\n            }\n            if (piece.x === gridX && piece.y === gridY) {\n              piece.x = x;\n              piece.y = y;\n              results.push(piece);\n            } else if (!(piece.x === x && piece.y === y)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n\n            return results;\n          }, [] as Piece[]);\n\n          setPieces(updatedPieces);\n        } else {\n          // Remove the attacked piece\n          activePiece.style.position = \"relative\";\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n\n  // chessboard designed\n\n  let board = [];\n\n  for (let i = verticalsAxis.length - 1; i >= 0; i--) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      const number = i + j + 2;\n      let image = \"\";\n\n      pieces.forEach((p) => {\n        if (p.x === j && p.y === i) {\n          image = p.image;\n        }\n      });\n\n      board.push(<Tile key={`${j},${i}`} image={image} number={number} />);\n    }\n  }\n\n  return (\n    <div\n      onMouseDown={(e) => grabPiece(e)}\n      onMouseMove={(e) => movePiece(e)}\n      onMouseUp={(e) => dropPiece(e)}\n      ref={chessboardRef}\n      id=\"chessboard\"\n      className=\"bg-violet-600 w-96 h-96\"\n    >\n      {board}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}