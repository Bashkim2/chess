{"ast":null,"code":"import { Status } from \"../constant\";\nimport actionTypes from \"./actionTypes\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.NEW_MOVE:\n      {\n        let {\n          position,\n          movesList,\n          turn\n        } = state;\n        position = [...position, action.payload.newPosition];\n        movesList = [...movesList, action.payload.newMove];\n        turn = turn === \"w\" ? \"b\" : \"w\";\n        return {\n          ...state,\n          position,\n          movesList,\n          turn\n        };\n      }\n    case actionTypes.GENERATE_CANDIDATE_MOVES:\n      {\n        const {\n          candidateMoves\n        } = action.payload;\n        return {\n          ...state,\n          candidateMoves\n        };\n      }\n    case actionTypes.CLEAR_CANDIDATE_MOVES:\n      {\n        return {\n          ...state,\n          candidateMoves: []\n        };\n      }\n    case actionTypes.PROMOTION_OPEN:\n      {\n        return {\n          ...state,\n          status: Status.promoting,\n          promotionSquare: {\n            ...action.payload\n          }\n        };\n      }\n    case actionTypes.PROMOTION_CLOSE:\n      {\n        return {\n          ...state,\n          status: Status.ongoing,\n          promotionSquare: null\n        };\n      }\n    case actionTypes.CAN_CASTLE:\n      {\n        let {\n          turn,\n          castleDirection\n        } = state;\n        castleDirection[turn] = action.payload;\n        return {\n          ...state,\n          castleDirection\n        };\n      }\n    case actionTypes.STALEMATE:\n      {\n        return {\n          ...state,\n          status: Status.stalemate\n        };\n      }\n    case actionTypes.INSUFFICIENT_MATERIAL:\n      {\n        return {\n          ...state,\n          status: Status.insufficient\n        };\n      }\n    case actionTypes.WIN:\n      {\n        return {\n          ...state,\n          status: action.payload === \"w\" ? Status.white : Status.black\n        };\n      }\n    case actionTypes.NEW_GAME:\n      {\n        return {\n          ...action.payload\n        };\n      }\n    case actionTypes.TAKE_BACK:\n      {\n        let {\n          position,\n          movesList,\n          turn\n        } = state;\n        if (position.length > 1) {\n          position = position.slice(0, position.length - 1);\n          movesList = movesList.slice(0, movesList.length - 1);\n          turn = turn === \"w\" ? \"b\" : \"w\";\n        }\n        return {\n          ...state,\n          position,\n          movesList,\n          turn\n        };\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["Status","actionTypes","reducer","state","action","type","NEW_MOVE","position","movesList","turn","payload","newPosition","newMove","GENERATE_CANDIDATE_MOVES","candidateMoves","CLEAR_CANDIDATE_MOVES","PROMOTION_OPEN","status","promoting","promotionSquare","PROMOTION_CLOSE","ongoing","CAN_CASTLE","castleDirection","STALEMATE","stalemate","INSUFFICIENT_MATERIAL","insufficient","WIN","white","black","NEW_GAME","TAKE_BACK","length","slice"],"sources":["/home/ahmed-bashir/React-projects/chess/src/reducer/reducer.js"],"sourcesContent":["import { Status } from \"../constant\";\nimport actionTypes from \"./actionTypes\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.NEW_MOVE: {\n      let { position, movesList, turn } = state;\n      position = [...position, action.payload.newPosition];\n      movesList = [...movesList, action.payload.newMove];\n      turn = turn === \"w\" ? \"b\" : \"w\";\n\n      return {\n        ...state,\n        position,\n        movesList,\n        turn,\n      };\n    }\n\n    case actionTypes.GENERATE_CANDIDATE_MOVES: {\n      const { candidateMoves } = action.payload;\n      return {\n        ...state,\n        candidateMoves,\n      };\n    }\n\n    case actionTypes.CLEAR_CANDIDATE_MOVES: {\n      return {\n        ...state,\n        candidateMoves: [],\n      };\n    }\n\n    case actionTypes.PROMOTION_OPEN: {\n      return {\n        ...state,\n        status: Status.promoting,\n        promotionSquare: { ...action.payload },\n      };\n    }\n\n    case actionTypes.PROMOTION_CLOSE: {\n      return {\n        ...state,\n        status: Status.ongoing,\n        promotionSquare: null,\n      };\n    }\n\n    case actionTypes.CAN_CASTLE: {\n      let { turn, castleDirection } = state;\n\n      castleDirection[turn] = action.payload;\n\n      return {\n        ...state,\n        castleDirection,\n      };\n    }\n\n    case actionTypes.STALEMATE: {\n      return {\n        ...state,\n        status: Status.stalemate,\n      };\n    }\n\n    case actionTypes.INSUFFICIENT_MATERIAL: {\n      return {\n        ...state,\n        status: Status.insufficient,\n      };\n    }\n\n    case actionTypes.WIN: {\n      return {\n        ...state,\n        status: action.payload === \"w\" ? Status.white : Status.black,\n      };\n    }\n\n    case actionTypes.NEW_GAME: {\n      return {\n        ...action.payload,\n      };\n    }\n\n    case actionTypes.TAKE_BACK: {\n      let { position, movesList, turn } = state;\n      if (position.length > 1) {\n        position = position.slice(0, position.length - 1);\n        movesList = movesList.slice(0, movesList.length - 1);\n        turn = turn === \"w\" ? \"b\" : \"w\";\n      }\n\n      return {\n        ...state,\n        position,\n        movesList,\n        turn,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}