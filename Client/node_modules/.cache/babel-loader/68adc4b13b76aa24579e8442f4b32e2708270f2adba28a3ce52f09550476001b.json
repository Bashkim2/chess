{"ast":null,"code":"import { getRookMoves, getKnightMoves, getBishopMoves, getKingMoves, getPawnMoves, getQueenMoves, getPawnCaptures } from \"./getMoves\";\nimport { movePawn, movePiece } from \"./move\";\nconst arbiter = {\n  getRegularMoves: function (_ref) {\n    let {\n      position,\n      piece,\n      rank,\n      file\n    } = _ref;\n    if (piece.endsWith(\"r\")) {\n      return getRookMoves({\n        position,\n        piece,\n        rank,\n        file\n      });\n    }\n    if (piece.endsWith(\"n\")) {\n      return getKnightMoves({\n        position,\n        rank,\n        file\n      });\n    }\n    if (piece.endsWith(\"b\")) {\n      return getBishopMoves({\n        position,\n        piece,\n        rank,\n        file\n      });\n    }\n    if (piece.endsWith(\"q\")) {\n      return getQueenMoves({\n        position,\n        piece,\n        rank,\n        file\n      });\n    }\n    if (piece.endsWith(\"k\")) {\n      return getKingMoves({\n        position,\n        piece,\n        rank,\n        file\n      });\n    }\n    if (piece.endsWith(\"p\")) {\n      return getPawnMoves({\n        position,\n        piece,\n        rank,\n        file\n      });\n    }\n  },\n  getValidMoves: function (_ref2) {\n    let {\n      position,\n      prevPosition,\n      piece,\n      rank,\n      file\n    } = _ref2;\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith(\"p\")) {\n      moves = [...moves, ...getPawnCaptures({\n        position,\n        prevPosition,\n        piece,\n        rank,\n        file\n      })];\n    }\n    return moves;\n  },\n  performMove: function (_ref3) {\n    let {\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    } = _ref3;\n    if (piece.endsWith(\"p\")) {\n      return movePawn({\n        position,\n        piece,\n        rank,\n        file,\n        x,\n        y\n      });\n    } else {\n      return movePiece({\n        position,\n        piece,\n        rank,\n        file,\n        x,\n        y\n      });\n    }\n  }\n};\nexport default arbiter;","map":{"version":3,"names":["getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","getPawnMoves","getQueenMoves","getPawnCaptures","movePawn","movePiece","arbiter","getRegularMoves","_ref","position","piece","rank","file","endsWith","getValidMoves","_ref2","prevPosition","moves","performMove","_ref3","x","y"],"sources":["/home/ahmed-bashir/React-projects/chess/src/arbiter/arbiter.js"],"sourcesContent":["import {\n  getRookMoves,\n  getKnightMoves,\n  getBishopMoves,\n  getKingMoves,\n  getPawnMoves,\n  getQueenMoves,\n  getPawnCaptures,\n} from \"./getMoves\";\nimport { movePawn, movePiece } from \"./move\";\n\nconst arbiter = {\n  getRegularMoves: function ({ position, piece, rank, file }) {\n    if (piece.endsWith(\"r\")) {\n      return getRookMoves({ position, piece, rank, file });\n    }\n    if (piece.endsWith(\"n\")) {\n      return getKnightMoves({ position, rank, file });\n    }\n    if (piece.endsWith(\"b\")) {\n      return getBishopMoves({ position, piece, rank, file });\n    }\n    if (piece.endsWith(\"q\")) {\n      return getQueenMoves({ position, piece, rank, file });\n    }\n    if (piece.endsWith(\"k\")) {\n      return getKingMoves({ position, piece, rank, file });\n    }\n    if (piece.endsWith(\"p\")) {\n      return getPawnMoves({ position, piece, rank, file });\n    }\n  },\n\n  getValidMoves: function ({ position, prevPosition, piece, rank, file }) {\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file,\n    });\n\n    if (piece.endsWith(\"p\")) {\n      moves = [\n        ...moves,\n        ...getPawnCaptures({ position, prevPosition, piece, rank, file }),\n      ];\n    }\n\n    return moves;\n  },\n\n  performMove: function ({ position, piece, rank, file, x, y }) {\n    if (piece.endsWith(\"p\")) {\n      return movePawn({ position, piece, rank, file, x, y });\n    } else {\n      return movePiece({ position, piece, rank, file, x, y });\n    }\n  },\n};\n\nexport default arbiter;\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,YAAY,EACZC,YAAY,EACZC,aAAa,EACbC,eAAe,QACV,YAAY;AACnB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,QAAQ;AAE5C,MAAMC,OAAO,GAAG;EACdC,eAAe,EAAE,SAAAA,CAAAC,IAAA,EAA2C;IAAA,IAAjC;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,IAAI;MAAEC;IAAK,CAAC,GAAAJ,IAAA;IACxD,IAAIE,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOhB,YAAY,CAAC;QAAEY,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC;MAAK,CAAC,CAAC;IACtD;IACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOf,cAAc,CAAC;QAAEW,QAAQ;QAAEE,IAAI;QAAEC;MAAK,CAAC,CAAC;IACjD;IACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOd,cAAc,CAAC;QAAEU,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC;MAAK,CAAC,CAAC;IACxD;IACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOX,aAAa,CAAC;QAAEO,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC;MAAK,CAAC,CAAC;IACvD;IACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOb,YAAY,CAAC;QAAES,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC;MAAK,CAAC,CAAC;IACtD;IACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOZ,YAAY,CAAC;QAAEQ,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC;MAAK,CAAC,CAAC;IACtD;EACF,CAAC;EAEDE,aAAa,EAAE,SAAAA,CAAAC,KAAA,EAAyD;IAAA,IAA/C;MAAEN,QAAQ;MAAEO,YAAY;MAAEN,KAAK;MAAEC,IAAI;MAAEC;IAAK,CAAC,GAAAG,KAAA;IACpE,IAAIE,KAAK,GAAG,IAAI,CAACV,eAAe,CAAC;MAC/BE,QAAQ;MACRC,KAAK;MACLC,IAAI;MACJC;IACF,CAAC,CAAC;IAEF,IAAIF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvBI,KAAK,GAAG,CACN,GAAGA,KAAK,EACR,GAAGd,eAAe,CAAC;QAAEM,QAAQ;QAAEO,YAAY;QAAEN,KAAK;QAAEC,IAAI;QAAEC;MAAK,CAAC,CAAC,CAClE;IACH;IAEA,OAAOK,KAAK;EACd,CAAC;EAEDC,WAAW,EAAE,SAAAA,CAAAC,KAAA,EAAiD;IAAA,IAAvC;MAAEV,QAAQ;MAAEC,KAAK;MAAEC,IAAI;MAAEC,IAAI;MAAEQ,CAAC;MAAEC;IAAE,CAAC,GAAAF,KAAA;IAC1D,IAAIT,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOT,QAAQ,CAAC;QAAEK,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC,IAAI;QAAEQ,CAAC;QAAEC;MAAE,CAAC,CAAC;IACxD,CAAC,MAAM;MACL,OAAOhB,SAAS,CAAC;QAAEI,QAAQ;QAAEC,KAAK;QAAEC,IAAI;QAAEC,IAAI;QAAEQ,CAAC;QAAEC;MAAE,CAAC,CAAC;IACzD;EACF;AACF,CAAC;AAED,eAAef,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}