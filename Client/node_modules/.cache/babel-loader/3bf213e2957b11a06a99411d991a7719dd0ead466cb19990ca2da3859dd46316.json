{"ast":null,"code":"export const getRookMoves = _ref => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref;\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === 'w' ? 'b' : 'w';\n  const direction = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n  direction.forEach(dir => {\n    for (let i = 1; i <= 8; i++) {\n      var _position$x;\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if ((position === null || position === void 0 ? void 0 : (_position$x = position[x]) === null || _position$x === void 0 ? void 0 : _position$x[y]) === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\nexport const getKnightMoves = _ref2 => {\n  let {\n    position,\n    rank,\n    file\n  } = _ref2;\n  const moves = [];\n  const enemy = position[rank][file].startsWith('w') ? 'b' : 'w';\n  const candidates = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]];\n  candidates.forEach(c => {\n    var _position;\n    const cell = position === null || position === void 0 ? void 0 : (_position = position[rank + c[0]]) === null || _position === void 0 ? void 0 : _position[file + c[1]];\n    if (cell !== undefined && (cell.startsWith(enemy) || cell === '')) {\n      moves.push([rank + c[0], file + c[1]]);\n    }\n  });\n  return moves;\n};\nexport const getBishopMoves = _ref3 => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref3;\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === 'w' ? 'b' : 'w';\n  const direction = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n  direction.forEach(dir => {\n    for (let i = 1; i <= 8; i++) {\n      var _position$x2;\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if ((position === null || position === void 0 ? void 0 : (_position$x2 = position[x]) === null || _position$x2 === void 0 ? void 0 : _position$x2[y]) === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\nexport const getQueenMoves = _ref4 => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref4;\n  const moves = [...getBishopMoves({\n    position,\n    piece,\n    rank,\n    file\n  }), ...getRookMoves({\n    position,\n    piece,\n    rank,\n    file\n  })];\n  return moves;\n};\nexport const getKingMoves = _ref5 => {\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref5;\n  let moves = [];\n  const us = piece[0];\n  const direction = [[1, -1], [1, 0], [1, 1], [0, -1], [0, 1], [-1, -1], [-1, 0], [-1, 1]];\n  direction.forEach(dir => {\n    var _position$x3;\n    const x = rank + dir[0];\n    const y = file + dir[1];\n    if ((position === null || position === void 0 ? void 0 : (_position$x3 = position[x]) === null || _position$x3 === void 0 ? void 0 : _position$x3[y]) !== undefined && !position[x][y].startsWith(us)) moves.push([x, y]);\n  });\n  return moves;\n};\nexport const getPawnMoves = _ref6 => {\n  var _position4;\n  let {\n    position,\n    piece,\n    rank,\n    file\n  } = _ref6;\n  const moves = [];\n  const dir = piece === 'wp' ? 1 : -1;\n\n  // Move two tiles on first move\n  if (rank % 5 === 1) {\n    var _position2, _position3;\n    if ((position === null || position === void 0 ? void 0 : (_position2 = position[rank + dir]) === null || _position2 === void 0 ? void 0 : _position2[file]) === '' && (position === null || position === void 0 ? void 0 : (_position3 = position[rank + dir + dir]) === null || _position3 === void 0 ? void 0 : _position3[file]) === '') {\n      moves.push([rank + dir + dir, file]);\n    }\n  }\n\n  // Move one tile\n  if (!(position !== null && position !== void 0 && (_position4 = position[rank + dir]) !== null && _position4 !== void 0 && _position4[file])) {\n    moves.push([rank + dir, file]);\n  }\n  return moves;\n};\nexport const getPawnCaptures = _ref7 => {\n  var _position5, _position6;\n  let {\n    position,\n    prevPosition,\n    piece,\n    rank,\n    file\n  } = _ref7;\n  const moves = [];\n  const dir = piece === 'wp' ? 1 : -1;\n  const enemy = piece[0] === 'w' ? 'b' : 'w';\n\n  // Capture enemy to left\n  if (position !== null && position !== void 0 && (_position5 = position[rank + dir]) !== null && _position5 !== void 0 && _position5[file - 1] && position[rank + dir][file - 1].startsWith(enemy)) {\n    moves.push([rank + dir, file - 1]);\n  }\n\n  // Capture enemy to right\n  if (position !== null && position !== void 0 && (_position6 = position[rank + dir]) !== null && _position6 !== void 0 && _position6[file + 1] && position[rank + dir][file + 1].startsWith(enemy)) {\n    moves.push([rank + dir, file + 1]);\n  }\n\n  // EnPassant\n  // Check if enemy moved twice in last round\n  const enemyPawn = dir === 1 ? 'bp' : 'wp';\n  const adjacentFiles = [file - 1, file + 1];\n  if (prevPosition) {\n    if (dir === 1 && rank === 4 || dir === -1 && rank === 3) {\n      adjacentFiles.forEach(f => {\n        var _position$rank, _position7, _prevPosition$rank, _prevPosition;\n        if ((position === null || position === void 0 ? void 0 : (_position$rank = position[rank]) === null || _position$rank === void 0 ? void 0 : _position$rank[f]) === enemyPawn && (position === null || position === void 0 ? void 0 : (_position7 = position[rank + dir + dir]) === null || _position7 === void 0 ? void 0 : _position7[f]) === '' && (prevPosition === null || prevPosition === void 0 ? void 0 : (_prevPosition$rank = prevPosition[rank]) === null || _prevPosition$rank === void 0 ? void 0 : _prevPosition$rank[f]) === '' && (prevPosition === null || prevPosition === void 0 ? void 0 : (_prevPosition = prevPosition[rank + dir + dir]) === null || _prevPosition === void 0 ? void 0 : _prevPosition[f]) === enemyPawn) {\n          moves.push([rank + dir, f]);\n        }\n      });\n    }\n  }\n  return moves;\n};\nexport const getCastlingMoves = _ref8 => {\n  let {\n    position,\n    castleDirection,\n    piece,\n    rank,\n    file\n  } = _ref8;\n  const moves = [];\n  if (file !== 4 || rank % 7 !== 0 || castleDirection === 'none') {\n    return moves;\n  }\n  if (piece.startsWith('w')) {\n    if (['left', 'both'].includes(castleDirection) && !position[0][3] && !position[0][2] && !position[0][1] && position[0][0] === 'wr') {\n      moves.push([0, 2]);\n    }\n    if (['right', 'both'].includes(castleDirection) && !position[0][5] && !position[0][6] && position[0][7] === 'wr') {\n      moves.push([0, 6]);\n    }\n  } else {\n    if (['left', 'both'].includes(castleDirection) && !position[7][3] && !position[7][2] && !position[7][1] && position[7][0] === 'br') {\n      moves.push([7, 2]);\n    }\n    if (['right', 'both'].includes(castleDirection) && !position[7][5] && !position[7][6] && position[7][7] === 'br') {\n      moves.push([7, 6]);\n    }\n  }\n  return moves;\n};","map":{"version":3,"names":["getRookMoves","_ref","position","piece","rank","file","moves","us","enemy","direction","forEach","dir","i","_position$x","x","y","undefined","startsWith","push","getKnightMoves","_ref2","candidates","c","_position","cell","getBishopMoves","_ref3","_position$x2","getQueenMoves","_ref4","getKingMoves","_ref5","_position$x3","getPawnMoves","_ref6","_position4","_position2","_position3","getPawnCaptures","_ref7","_position5","_position6","prevPosition","enemyPawn","adjacentFiles","f","_position$rank","_position7","_prevPosition$rank","_prevPosition","getCastlingMoves","_ref8","castleDirection","includes"],"sources":["/home/ahmed-bashir/React-projects/chess/src/arbiter/getMoves.js"],"sourcesContent":["export const getRookMoves = ({position,piece,rank,file}) => {\n  const moves = []\n  const us = piece[0]\n  const enemy = us === 'w' ? 'b' : 'w'\n\n  const direction = [\n      [-1,0],\n      [1,0],\n      [0,-1],\n      [0,1],\n  ]\n\n  direction.forEach(dir => {\n      for (let i = 1; i <= 8; i++) {\n          const x = rank+(i*dir[0])\n          const y = file+(i*dir[1])\n          if(position?.[x]?.[y] === undefined)\n              break\n          if(position[x][y].startsWith(enemy)){\n              moves.push ([x,y])\n              break;\n          }\n          if(position[x][y].startsWith(us)){\n              break\n          }\n          moves.push ([x,y])\n      }\n  })\n\n  return moves\n}\n\nexport const getKnightMoves = ({position,rank,file}) => {\n  const moves = []\n  const enemy = position[rank][file].startsWith('w') ? 'b' : 'w'\n\n  const candidates = [\n      [-2,-1],\n      [-2,1],\n      [-1,-2],\n      [-1,2],\n      [1,-2],\n      [1,2],\n      [2,-1],\n      [2,1],\n  ]\n  candidates.forEach(c => {\n      const cell = position?.[rank+c[0]]?.[file+c[1]]\n      if(cell !== undefined && (cell.startsWith(enemy) || cell === '')){\n          moves.push ([rank+c[0],file+c[1]])\n      }\n  })\n  return moves\n}\n\nexport const getBishopMoves = ({position,piece,rank,file}) => {\n  const moves = []\n  const us = piece[0]\n  const enemy = us === 'w' ? 'b' : 'w'\n\n  const direction = [\n      [-1,-1],\n      [-1,1],\n      [1,-1],\n      [1,1],\n  ]\n\n  direction.forEach(dir => {\n      for (let i = 1; i <= 8; i++) {\n          const x = rank+(i*dir[0])\n          const y = file+(i*dir[1])\n          if(position?.[x]?.[y] === undefined)\n              break\n          if(position[x][y].startsWith(enemy)){\n              moves.push ([x,y])\n              break;\n          }\n          if(position[x][y].startsWith(us)){\n              break\n          }\n          moves.push ([x,y])\n      }\n  })\n  return moves\n}\n\nexport const getQueenMoves = ({position,piece,rank,file}) => {\n  const moves = [\n      ...getBishopMoves({position,piece,rank,file}),\n      ...getRookMoves({position,piece,rank,file})\n  ]\n  \n  return moves\n}\n\nexport const getKingMoves = ({position,piece,rank,file}) => {\n  let moves = []\n  const us = piece[0]\n  const direction = [\n      [1,-1], [1,0],  [1,1],\n      [0,-1],         [0,1],\n      [-1,-1],[-1,0], [-1,1],\n  ]\n\n  direction.forEach(dir => {\n      const x = rank+dir[0]\n      const y = file+dir[1]\n      if(position?.[x]?.[y] !== undefined && !position[x][y].startsWith(us))\n      moves.push ([x,y])\n  })\n  return moves\n}\n\nexport const getPawnMoves = ({position,piece,rank,file}) => {\n\n  const moves = []\n  const dir = piece==='wp' ? 1 : -1\n\n  // Move two tiles on first move\n  if (rank % 5 === 1){\n      if (position?.[rank+dir]?.[file] === '' && position?.[rank+dir+dir]?.[file] === ''){\n          moves.push ([rank+dir+dir,file])\n      }\n  }\n\n  // Move one tile\n  if (!position?.[rank+dir]?.[file]){\n      moves.push ([rank+dir,file])\n  }\n\n  return moves\n}\n\nexport const getPawnCaptures =  ({position,prevPosition,piece,rank,file}) => {\n\n  const moves = []\n  const dir = piece==='wp' ? 1 : -1\n  const enemy = piece[0] === 'w' ? 'b' : 'w'\n\n  // Capture enemy to left\n  if (position?.[rank+dir]?.[file-1] && position[rank+dir][file-1].startsWith(enemy) ){\n      moves.push ([rank+dir,file-1])\n  }\n\n  // Capture enemy to right\n  if (position?.[rank+dir]?.[file+1] && position[rank+dir][file+1].startsWith(enemy) ){\n      moves.push ([rank+dir,file+1])\n  }\n\n  // EnPassant\n  // Check if enemy moved twice in last round\n  const enemyPawn = dir === 1 ? 'bp' : 'wp'\n  const adjacentFiles = [file-1,file+1]\n  if(prevPosition){\n      if ((dir === 1 && rank === 4) || (dir === -1 && rank === 3)){\n          adjacentFiles.forEach(f => {\n              if (position?.[rank]?.[f] === enemyPawn && \n                  position?.[rank+dir+dir]?.[f] === '' &&\n                  prevPosition?.[rank]?.[f] === '' && \n                  prevPosition?.[rank+dir+dir]?.[f] === enemyPawn){\n                      moves.push ([rank+dir,f])\n                  }\n          })\n      }\n  }\n\n\n  return moves\n}\n\nexport const getCastlingMoves = ({position,castleDirection,piece,rank,file}) => {\n  const moves = []\n  \n  if (file !== 4 || rank % 7 !== 0 || castleDirection === 'none'){\n      return moves\n  }\n  if (piece.startsWith('w') ){\n      if (['left','both'].includes(castleDirection) && \n          !position[0][3] && \n          !position[0][2] && \n          !position[0][1] &&\n          position[0][0] === 'wr'){\n          moves.push ([0,2])\n      }\n      if (['right','both'].includes(castleDirection) && \n          !position[0][5] && \n          !position[0][6] &&\n          position[0][7] === 'wr')\n          {\n          moves.push ([0,6])\n      }\n  }\n  else {\n      if (['left','both'].includes(castleDirection) && \n          !position[7][3] && \n          !position[7][2] && \n          !position[7][1] &&\n          position[7][0] === 'br'){\n          moves.push ([7,2])\n      }\n      if (['right','both'].includes(castleDirection) && \n          !position[7][5] && \n          !position[7][6] &&\n          position[7][7] === 'br'){\n          moves.push ([7,6])\n      }\n  }\n\n  return moves\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}