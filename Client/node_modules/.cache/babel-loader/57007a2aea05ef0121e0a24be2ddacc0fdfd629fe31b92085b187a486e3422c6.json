{"ast":null,"code":"var _jsxFileName = \"/home/ahmed-bashir/React-projects/chess/src/components/chessboard.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport \"../css/App.css\";\nimport \"../css/Output.css\";\nimport Tile from \"./tile\";\nimport Referee from \"../referee/Referee\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst verticalsAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst horizontalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nexport let PieceType;\n(function (PieceType) {\n  PieceType[PieceType[\"PAWN\"] = 0] = \"PAWN\";\n  PieceType[PieceType[\"BISHOP\"] = 1] = \"BISHOP\";\n  PieceType[PieceType[\"KNIGHT\"] = 2] = \"KNIGHT\";\n  PieceType[PieceType[\"ROOK\"] = 3] = \"ROOK\";\n  PieceType[PieceType[\"QUEEN\"] = 4] = \"QUEEN\";\n  PieceType[PieceType[\"KING\"] = 5] = \"KING\";\n})(PieceType || (PieceType = {}));\nvar pieceList; // The chessboard and pieces positions initially\n(function (pieceList) {\n  pieceList[pieceList[\"Rook\"] = 0] = \"Rook\";\n  pieceList[pieceList[\"KNIGHT\"] = 1] = \"KNIGHT\";\n  pieceList[pieceList[\"BISHOP\"] = 2] = \"BISHOP\";\n  pieceList[pieceList[\"QUEEN\"] = 3] = \"QUEEN\";\n  pieceList[pieceList[\"KING\"] = 4] = \"KING\";\n})(pieceList || (pieceList = {}));\nconst initialBoardState = [];\nconst numberPiece = 8;\n\n// white pieces without pawns positions\nconst whitePiece = [\"W_rock.png\", \"W_knight.png\", \"W_bishop.png\", \"W_queen.png\", \"W_king.png\", \"W_bishop.png\", \"W_knight.png\", \"W_rock.png\"];\nfor (let i = 0; i < numberPiece; i++) {\n  if (i === 0 && i === numberPiece - 1) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.ROOK\n    });\n  } else if (i === 1 && i === numberPiece - 2) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.BISHOP\n    });\n  } else if (i === 2 && i === numberPiece - 3) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.KNIGHT\n    });\n  } else if (i === 4) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.QUEEN\n    });\n  } else {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.KING\n    });\n  }\n}\n\n// black pieces without pawns positions\nconst blackPiece = [\"B_rock.png\", \"B_knight.png\", \"B_bishop.png\", \"B_queen.png\", \"B_king.png\", \"B_bishop.png\", \"B_knight.png\", \"B_rock.png\"];\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: blackPiece[i],\n    x: i,\n    y: 7,\n    type: PieceType.PAWN\n  });\n}\n\n// white pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"B_pawn.png\",\n    x: i,\n    y: 6,\n    type: PieceType.PAWN\n  });\n}\n\n// black pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"W_pawn.png\",\n    x: i,\n    y: 1,\n    type: PieceType.PAWN\n  });\n}\n\n// The chessboard functionality\nexport default function Chessboard() {\n  _s();\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const referee = new Referee();\n  const chessboardRef = useRef(null);\n\n  // Functions for moving, grabbing and dropping pieces\n  function grabPiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chessPiece\") && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setGridX(gridX);\n      setGridY(gridY);\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 25;\n      const y = e.clientY - 25;\n      activePiece.style.position = \"absolute\";\n\n      // chessboard constraints/limitations,\n      // pieces can not be moved outside of the chessboard\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n\n      // console.log(x, y);\n\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === gridX && p.y === gridY) {\n            referee.isValidMove(gridX, gridY, x, y, p.type);\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n\n  // chessboard designed\n\n  let board = [];\n  for (let i = verticalsAxis.length - 1; i >= 0; i--) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      const number = i + j + 2;\n      let image = \"\";\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${j},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseDown: e => grabPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseUp: e => dropPiece(e),\n    ref: chessboardRef,\n    id: \"chessboard\",\n    className: \"bg-violet-600 w-96 h-96\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"EsFUs8MlFnM+tn6BqopUP4P6ED4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["useRef","useState","Tile","Referee","jsxDEV","_jsxDEV","verticalsAxis","horizontalAxis","PieceType","pieceList","initialBoardState","numberPiece","whitePiece","i","push","image","x","y","type","ROOK","BISHOP","KNIGHT","QUEEN","KING","blackPiece","PAWN","Chessboard","_s","pieces","setPieces","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","referee","chessboardRef","grabPiece","e","element","target","chessboard","current","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","value","map","p","isValidMove","board","length","j","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","ref","id","className","children","_c","$RefreshReg$"],"sources":["/home/ahmed-bashir/React-projects/chess/src/components/chessboard.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport \"../css/App.css\";\nimport \"../css/Output.css\";\nimport Tile from \"./tile\";\nimport Referee from \"../referee/Referee\";\n\nconst verticalsAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst horizontalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\n\ninterface Piece {\n  image: string;\n  x: number;\n  y: number;\n  type: PieceType;\n}\n\nexport enum PieceType {\n  PAWN,\n  BISHOP,\n  KNIGHT,\n  ROOK,\n  QUEEN,\n  KING,\n}\n\nenum pieceList {\n  Rook,\n  KNIGHT,\n  BISHOP,\n  QUEEN,\n  KING,\n}\n// The chessboard and pieces positions initially\n\nconst initialBoardState: Piece[] = [];\nconst numberPiece = 8;\n\n// white pieces without pawns positions\nconst whitePiece = [\n  \"W_rock.png\",\n  \"W_knight.png\",\n  \"W_bishop.png\",\n  \"W_queen.png\",\n  \"W_king.png\",\n  \"W_bishop.png\",\n  \"W_knight.png\",\n  \"W_rock.png\",\n];\n\nfor (let i = 0; i < numberPiece; i++) {\n  if (i === 0 && i === numberPiece - 1) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.ROOK,\n    });\n  } else if (i === 1 && i === numberPiece - 2) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.BISHOP,\n    });\n  } else if (i === 2 && i === numberPiece - 3) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.KNIGHT,\n    });\n  } else if (i === 4) {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.QUEEN,\n    });\n  } else {\n    initialBoardState.push({\n      image: whitePiece[i],\n      x: i,\n      y: 0,\n      type: PieceType.KING,\n    });\n  }\n}\n\n// black pieces without pawns positions\nconst blackPiece = [\n  \"B_rock.png\",\n  \"B_knight.png\",\n  \"B_bishop.png\",\n  \"B_queen.png\",\n  \"B_king.png\",\n  \"B_bishop.png\",\n  \"B_knight.png\",\n  \"B_rock.png\",\n];\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: blackPiece[i],\n    x: i,\n    y: 7,\n    type: PieceType.PAWN,\n  });\n}\n\n// white pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"B_pawn.png\",\n    x: i,\n    y: 6,\n    type: PieceType.PAWN,\n  });\n}\n\n// black pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"W_pawn.png\",\n    x: i,\n    y: 1,\n    type: PieceType.PAWN,\n  });\n}\n\n// The chessboard functionality\nexport default function Chessboard() {\n  const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\n  const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const referee = new Referee();\n\n  const chessboardRef = useRef<HTMLDivElement>(null);\n\n  // Functions for moving, grabbing and dropping pieces\n  function grabPiece(e: React.MouseEvent) {\n    const element = e.target as HTMLElement;\n    const chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"chessPiece\") && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n\n      setGridX(gridX);\n      setGridY(gridY);\n\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e: React.MouseEvent) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 25;\n      const y = e.clientY - 25;\n      activePiece.style.position = \"absolute\";\n\n      // chessboard constraints/limitations,\n      // pieces can not be moved outside of the chessboard\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  function dropPiece(e: React.MouseEvent) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n\n      // console.log(x, y);\n\n      setPieces((value) => {\n        const pieces = value.map((p) => {\n          if (p.x === gridX && p.y === gridY) {\n            referee.isValidMove(gridX, gridY, x, y, p.type);\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n\n  // chessboard designed\n\n  let board = [];\n\n  for (let i = verticalsAxis.length - 1; i >= 0; i--) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      const number = i + j + 2;\n      let image = \"\";\n\n      pieces.forEach((p) => {\n        if (p.x === j && p.y === i) {\n          image = p.image;\n        }\n      });\n\n      board.push(<Tile key={`${j},${i}`} image={image} number={number} />);\n    }\n  }\n\n  return (\n    <div\n      onMouseDown={(e) => grabPiece(e)}\n      onMouseMove={(e) => movePiece(e)}\n      onMouseUp={(e) => dropPiece(e)}\n      ref={chessboardRef}\n      id=\"chessboard\"\n      className=\"bg-violet-600 w-96 h-96\"\n    >\n      {board}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}