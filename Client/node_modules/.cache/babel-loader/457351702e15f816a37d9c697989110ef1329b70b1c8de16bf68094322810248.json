{"ast":null,"code":"var _jsxFileName = \"/home/ahmed-bashir/React-projects/chess/src/componen/chessboard.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport \"../css/App.css\";\nimport \"../css/Output.css\";\nimport Tile from \"./tile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst verticalsAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst horizontalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\n// The chessboard and pieces positions initially\n\nconst initialBoardState = [];\n\n// white pieces without pawns positions\nconst whitePiece = [\"W_rock.png\", \"W_knight.png\", \"W_bishop.png\", \"W_queen.png\", \"W_king.png\", \"W_bishop.png\", \"W_knight.png\", \"W_rock.png\"];\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: whitePiece[i],\n    x: i,\n    y: 0\n  });\n}\n\n// black pieces without pawns positions\nconst blackPiece = [\"B_rock.png\", \"B_knight.png\", \"B_bishop.png\", \"B_queen.png\", \"B_king.png\", \"B_bishop.png\", \"B_knight.png\", \"B_rock.png\"];\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: blackPiece[i],\n    x: i,\n    y: 7\n  });\n}\n\n// white pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"B_pawn.png\",\n    x: i,\n    y: 6\n  });\n}\n\n// black pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"W_pawn.png\",\n    x: i,\n    y: 1\n  });\n}\n\n// The chessboard functionality\nexport default function Chessboard() {\n  _s();\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const chessboardRef = useRef(null);\n\n  // Functions for moving, grabbing and dropping pieces\n  function grabPiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chessPiece\") && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setGridX(gridX);\n      setGridY(gridY);\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 25;\n      const y = e.clientY - 25;\n      activePiece.style.position = \"absolute\";\n\n      // chessboard constraints/limitations,\n      // pieces can not be moved outside of the chessboard\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      console.log(x, y);\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === gridX && p.y === gridY) {\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n\n  // chessboard designed\n\n  let board = [];\n  for (let i = verticalsAxis.length - 1; i >= 0; i--) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      const number = i + j + 2;\n      let image = \"\";\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${j},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 18\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseDown: e => grabPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseUp: e => dropPiece(e),\n    ref: chessboardRef,\n    id: \"chessboard\",\n    className: \"bg-violet-600 w-96 h-96\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(Chessboard, \"EsFUs8MlFnM+tn6BqopUP4P6ED4=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["useRef","useState","Tile","jsxDEV","_jsxDEV","verticalsAxis","horizontalAxis","initialBoardState","whitePiece","i","push","image","x","y","blackPiece","Chessboard","_s","pieces","setPieces","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","chessboardRef","grabPiece","e","element","target","chessboard","current","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","console","log","value","map","p","board","length","j","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","ref","id","className","children","_c","$RefreshReg$"],"sources":["/home/ahmed-bashir/React-projects/chess/src/componen/chessboard.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport \"../css/App.css\";\nimport \"../css/Output.css\";\nimport Tile from \"./tile\";\n\nconst verticalsAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst horizontalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\n\ninterface Piece {\n  image: string;\n  x: number;\n  y: number;\n}\n\n// The chessboard and pieces positions initially\n\nconst initialBoardState: Piece[] = [];\n\n// white pieces without pawns positions\nconst whitePiece = [\n  \"W_rock.png\",\n  \"W_knight.png\",\n  \"W_bishop.png\",\n  \"W_queen.png\",\n  \"W_king.png\",\n  \"W_bishop.png\",\n  \"W_knight.png\",\n  \"W_rock.png\",\n];\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({ image: whitePiece[i], x: i, y: 0 });\n}\n\n// black pieces without pawns positions\nconst blackPiece = [\n  \"B_rock.png\",\n  \"B_knight.png\",\n  \"B_bishop.png\",\n  \"B_queen.png\",\n  \"B_king.png\",\n  \"B_bishop.png\",\n  \"B_knight.png\",\n  \"B_rock.png\",\n];\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({ image: blackPiece[i], x: i, y: 7 });\n}\n\n// white pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({ image: \"B_pawn.png\", x: i, y: 6 });\n}\n\n// black pawns positions\n\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({ image: \"W_pawn.png\", x: i, y: 1 });\n}\n\n// The chessboard functionality\nexport default function Chessboard() {\n  const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\n  const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n\n  const chessboardRef = useRef<HTMLDivElement>(null);\n\n  // Functions for moving, grabbing and dropping pieces\n  function grabPiece(e: React.MouseEvent) {\n    const element = e.target as HTMLElement;\n    const chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"chessPiece\") && chessboard) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const gridY = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n\n      setGridX(gridX);\n      setGridY(gridY);\n\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e: React.MouseEvent) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 25;\n      const y = e.clientY - 25;\n      activePiece.style.position = \"absolute\";\n\n      // chessboard constraints/limitations,\n      // pieces can not be moved outside of the chessboard\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  function dropPiece(e: React.MouseEvent) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n\n      console.log(x, y);\n      setPieces((value) => {\n        const pieces = value.map((p) => {\n          if (p.x === gridX && p.y === gridY) {\n            p.x = x;\n            p.y = y;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      setActivePiece(null);\n    }\n  }\n\n  // chessboard designed\n\n  let board = [];\n\n  for (let i = verticalsAxis.length - 1; i >= 0; i--) {\n    for (let j = 0; j < horizontalAxis.length; j++) {\n      const number = i + j + 2;\n      let image = \"\";\n\n      pieces.forEach((p) => {\n        if (p.x === j && p.y === i) {\n          image = p.image;\n        }\n      });\n\n      board.push(<Tile key={`${j},${i}`} image={image} number={number} />);\n    }\n  }\n\n  return (\n    <div\n      onMouseDown={(e) => grabPiece(e)}\n      onMouseMove={(e) => movePiece(e)}\n      onMouseUp={(e) => dropPiece(e)}\n      ref={chessboardRef}\n      id=\"chessboard\"\n      className=\"bg-violet-600 w-96 h-96\"\n    >\n      {board}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}