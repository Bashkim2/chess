{"ast":null,"code":"import { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves, getPieces, getKingPosition } from './getMoves';\nimport { movePiece, movePawn } from './move';\nconst arbiter = {\n  getRegularMoves: function (_ref) {\n    let {\n      position,\n      piece,\n      rank,\n      file\n    } = _ref;\n    if (piece.endsWith('n')) return getKnightMoves({\n      position,\n      rank,\n      file\n    });\n    if (piece.endsWith('b')) return getBishopMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('r')) return getRookMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('q')) return getQueenMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('k')) return getKingMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('p')) return getPawnMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n  },\n  getValidMoves: function (_ref2) {\n    let {\n      position,\n      castleDirection,\n      prevPosition,\n      piece,\n      rank,\n      file\n    } = _ref2;\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    const notInCheckMoves = [];\n    if (piece.endsWith('p')) {\n      moves = [...moves, ...getPawnCaptures({\n        position,\n        prevPosition,\n        piece,\n        rank,\n        file\n      })];\n    }\n    if (piece.endsWith('k')) moves = [...moves, ...getCastlingMoves({\n      position,\n      castleDirection,\n      piece,\n      rank,\n      file\n    })];\n    moves.forEach(_ref3 => {\n      let [x, y] = _ref3;\n      const positionAfterMove = this.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x,\n        y\n      });\n      if (!this.isPlayerInCheck({\n        positionAfterMove,\n        position,\n        player: piece[0]\n      })) {\n        notInCheckMoves.push([x, y]);\n      }\n    });\n    return notInCheckMoves;\n  },\n  isPlayerInCheck: function (_ref4) {\n    let {\n      positionAfterMove,\n      position,\n      player\n    } = _ref4;\n    const enemy = player.startsWith('w') ? 'b' : 'w';\n    let kingPos = getKingPosition(positionAfterMove, player);\n    const enemyPieces = getPieces(positionAfterMove, enemy);\n    const enemyMoves = enemyPieces.reduce((acc, p) => acc = [...acc, ...(p.piece.endsWith('p') ? getPawnCaptures({\n      position: positionAfterMove,\n      prevPosition: position,\n      ...p\n    }) : this.getRegularMoves({\n      position: positionAfterMove,\n      ...p\n    }))], []);\n    if (enemyMoves.some(_ref5 => {\n      let [x, y] = _ref5;\n      return kingPos[0] === x && kingPos[1] === y;\n    })) return true;else return false;\n  },\n  performMove: function (_ref6) {\n    let {\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    } = _ref6;\n    if (piece.endsWith('p')) return movePawn({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });else return movePiece({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });\n  },\n  isStalemate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player\n    });\n    if (isInCheck) return false;\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce((acc, p) => acc = [...acc, ...this.getValidMoves({\n      position,\n      castleDirection,\n      ...p\n    })], []);\n    return !isInCheck && moves.length === 0;\n  }\n};\nexport default arbiter;","map":{"version":3,"names":["getKnightMoves","getRookMoves","getBishopMoves","getQueenMoves","getKingMoves","getPawnMoves","getPawnCaptures","getCastlingMoves","getPieces","getKingPosition","movePiece","movePawn","arbiter","getRegularMoves","_ref","position","piece","rank","file","endsWith","getValidMoves","_ref2","castleDirection","prevPosition","moves","notInCheckMoves","forEach","_ref3","x","y","positionAfterMove","performMove","isPlayerInCheck","player","push","_ref4","enemy","startsWith","kingPos","enemyPieces","enemyMoves","reduce","acc","p","some","_ref5","_ref6","isStalemate","isInCheck","pieces","length"],"sources":["/home/ahmed-bashir/React-projects/chess/src/arbiter/arbiter.js"],"sourcesContent":["import { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves, getPieces, getKingPosition } from './getMoves'\nimport { movePiece,movePawn } from './move';\n\nconst arbiter = {\n\n    getRegularMoves : function ({position,piece,rank,file}) {\n        if (piece.endsWith('n'))\n            return getKnightMoves({position,rank,file});\n        if (piece.endsWith('b'))\n            return getBishopMoves({position,piece,rank,file});\n        if (piece.endsWith('r'))\n            return getRookMoves({position,piece,rank,file});\n        if (piece.endsWith('q'))\n            return getQueenMoves({position,piece,rank,file});\n        if (piece.endsWith('k'))\n            return getKingMoves({position,piece,rank,file});\n        if (piece.endsWith('p'))\n            return getPawnMoves({position,piece,rank,file})\n    },\n   \n    getValidMoves : function ({position,castleDirection,prevPosition,piece,rank,file}) {\n        let moves = this.getRegularMoves({position,piece,rank,file})\n        const notInCheckMoves = []\n\n        if (piece.endsWith('p')){\n            moves = [\n                ...moves,\n                ...getPawnCaptures({position,prevPosition,piece,rank,file})\n            ]\n        }\n        if (piece.endsWith('k'))\n            moves = [\n                ...moves , \n                ...getCastlingMoves({position,castleDirection,piece,rank,file})\n            ]\n\n        moves.forEach(([x,y]) => {\n            const positionAfterMove = \n                this.performMove({position,piece,rank,file,x,y})\n\n            if (!this.isPlayerInCheck({positionAfterMove, position, player : piece[0]})){\n                notInCheckMoves.push([x,y])\n            }\n        })\n        return notInCheckMoves\n    },\n\n    isPlayerInCheck : function ({positionAfterMove, position, player}) {\n        const enemy = player.startsWith('w') ? 'b' : 'w'\n        let kingPos = getKingPosition(positionAfterMove,player)\n        const enemyPieces = getPieces(positionAfterMove,enemy)\n\n        const enemyMoves = enemyPieces.reduce((acc,p) => acc = [\n            ...acc,\n            ...(p.piece.endsWith('p')\n            ?   getPawnCaptures({\n                    position: positionAfterMove, \n                    prevPosition:  position,\n                    ...p\n                })\n            :   this.getRegularMoves({\n                    position: positionAfterMove, \n                    ...p\n                })\n            )\n        ], [])\n    \n        if (enemyMoves.some (([x,y]) => kingPos[0] === x && kingPos[1] === y))\n        return true\n\n        else\n        return false\n    },\n\n    performMove : function ({position,piece,rank,file,x,y}) {\n        if (piece.endsWith('p'))\n            return movePawn({position,piece,rank,file,x,y})\n        else \n            return movePiece({position,piece,rank,file,x,y})\n    },\n\n    isStalemate : function(position,player,castleDirection) {\n        const isInCheck = this.isPlayerInCheck({positionAfterMove: position, player})\n\n        if (isInCheck)\n            return false\n            \n        const pieces = getPieces(position,player)\n        const moves = pieces.reduce((acc,p) => acc = [\n            ...acc,\n            ...(this.getValidMoves({\n                    position, \n                    castleDirection, \n                    ...p\n                })\n            )\n        ], [])\n\n        return (!isInCheck && moves.length === 0)\n    },\n}\n\n\nexport default arbiter"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}